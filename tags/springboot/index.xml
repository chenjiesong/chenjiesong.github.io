<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Springboot on song</title>
    <link>https://chenjiesong.github.io/tags/springboot/</link>
    <description>Recent content in Springboot on song</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenjiesong.github.io/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Springboot目录结构</title>
      <link>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>Application类（入口类）  里面的@SpringBootApplication注解是springboot的核心注解，主要作用是开启spring自动配置。使用这个注解相当于加上了下面三个注解：main方法中的SpringApplication.run在启动的时候会启动springboot程序，启动spring容器，启动内嵌的tomcat容器。  @Conifuration 允许将其他@bean注解标识的类加入到spring容器中，相当于spring配置文件中的beans标签 @EnableAutoConfiguration 启动自动配置 ComponentScan 会自动扫描当前包和子包下的标有@Component，@Service，@Repository,@Controller的类。相当于以前spring配置文件中的context：compon-scan   不要创建一个比Application类包级别高的类，需要创建子包，因为spring boot会自动扫描application类的子包或者平级的类。如果是高于application的话就无法扫描了。   resources目录  application.properties是spring boot配置文件 static存放静态资源 templatesspring boot动态的数据不建议使用jsp，而是使用thymeleaf模板语言，跟velocity和freemarker类似，是一个模板引擎。是独立于spring boot的，并不是spring boot的一部分。   pom文件解析 依赖没有版本号，是从父工程中选择继承的。这个依赖叫做起步依赖，这些第三方的依赖是写再了dependencymanagement中，所以我们的项目如果想要使用的话，还需要些依赖，只不过版本号是可以省略的。如果不想使用spring boot的默认版本的话，自己动手添加版本号即可。</description>
    </item>
    
  </channel>
</rss>
