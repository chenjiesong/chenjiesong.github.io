<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Springboot on song</title>
    <link>https://chenjiesong.github.io/tags/springboot/</link>
    <description>Recent content in Springboot on song</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenjiesong.github.io/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot-JDBCtemplate-Druid-MyBatis-Redis</title>
      <link>https://chenjiesong.github.io/posts/springboot-jdbctemplate-druid-mybatis-redis/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot-jdbctemplate-druid-mybatis-redis/</guid>
      <description>（一）整合JdbcTemplate （1）引入依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; （2）修改配置
接着，我们需要在配置文件中配置数据库的一些信息，例如用户名密码等等，我们用 yml 配，用 properties 也是一样的
关于 url 这个选项多说一句，我的表名 springboot_mybatis_test，但是如果不设置时区或者一些编码，不同的版本使用中可能会出现一些错误（5 可以不配置时区，高版本的需要）
spring: datasource: username: root password: AS518101DF # serverTimezone=Asia/Shanghai 这样解决时区的报错会好一些 url: jdbc:mysql://localhost:3306/customer?serverTimezone=Asia/Shanghai&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8 driver-class-name: com.mysql.cj.jdbc.Driver （3）使用JdbcTemplate 进行CURD
经过简单的配置，其实已经可以进行原生 JDBC 的增删改查了，原生的确实有点繁琐，Spring 已经给我们进行了一定的简化，也就是 JdbcTemplate，这个我们应该也很早就用过了
A：查询
关于查询，我给大家展示两种方式，一种就是如果我们存在实体对应数据库中的内容，还有一种就是没有对应的实体的查询方式，同时别忘记注入 JdbcTemplate
 有实体：在query中new 一个 BeanPropertyRowMapper，也就是让 JdbcTemplate 帮我们把查询结果集ResultSet 的每一行结果都使用 BeanPropertyRowMapper.mapRow() 方法，转化成我们想要的Java类对象 没有实体：使用queryForList方法，返回一个集合，集合中是一个个 map  @Controller @RequestMapping(&amp;#34;/jdbc&amp;#34;) public class JdbcTemplateController { @Autowired JdbcTemplate jdbcTemplate; //有对应实体  @RequestMapping(&amp;#34;/userList&amp;#34;) public void userList(){ String sql = &amp;#34;select * from user&amp;#34;; ArrayList&amp;lt;User&amp;gt; users = (ArrayList&amp;lt;User&amp;gt;) jdbcTemplate.</description>
    </item>
    
    <item>
      <title>Springboot-Thymeleaf模板</title>
      <link>https://chenjiesong.github.io/posts/springboot-thymeleaf%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot-thymeleaf%E6%A8%A1%E6%9D%BF/</guid>
      <description>（一）模板引擎引入 1.pom增加依赖
&amp;lt;!--thymeleaf--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.模板页面存放位置
具体路径为：src -- main -- resources -- template
@ConfigurationProperties(prefix = &amp;#34;spring.thymeleaf&amp;#34;) public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8; public static final String DEFAULT_PREFIX = &amp;#34;classpath:/templates/&amp;#34;; public static final String DEFAULT_SUFFIX = &amp;#34;.html&amp;#34;; // 是否在呈现模板之前检查模板是否存在  private boolean checkTemplate = true; // 是否检查模板位置是否存在  private boolean checkTemplateLocation = true; // 在构建URL时以查看名称作为前缀  private String prefix = DEFAULT_PREFIX; // 在构建URL时附加到视图名称的后缀  private String suffix = DEFAULT_SUFFIX; // 要应用于模板的模板模式  private String mode = &amp;#34;HTML&amp;#34;; // 模板文件编码  private Charset encoding = DEFAULT_ENCODING; 3.</description>
    </item>
    
    <item>
      <title>Springboot-Web静态资源处理</title>
      <link>https://chenjiesong.github.io/posts/springboot-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot-web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</guid>
      <description>（一）静态资源处理方式 如果要做一个完整的Web项目，需要诸多的静态资源（CSS、JS等），按照以往Spring的开发来说，我们的main下会有一个webapp文件夹，但是我们现在创建的SpringBoot项目却不然，这是因为SpringBoot对于静态资源的放置，有自己的一套规定。
（1）第一种映射规则
A： 规则分析
首先来看一下 SpringMVC 关于 web 的配置，ctrl + n 查找一下 WebMvcAutoConfiguration 这个配置类，找到 addResourceHandlers，看到一项与资源配置有关，addResourceHandlers，的简单看一下源码，其实就大致能明白，访此 /webjars/** 路径下的内容，就会去 /META-INF/resources/webjars/ 下去找，
addResourceHandlers
Duration cachePeriod = this.resourceProperties.getCache().getPeriod(); CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl(); if (!registry.hasMappingForPattern(&amp;#34;/webjars/**&amp;#34;)) { customizeResourceHandlerRegistration(registry.addResourceHandler(&amp;#34;/webjars/**&amp;#34;) .addResourceLocations(&amp;#34;classpath:/META-INF/resources/webjars/&amp;#34;)	.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)); } 首先来看一下webjars的概念
B：Webjars
以前项目中，如果需要一些静态资源，我们会直接引入文件到项目中，但是Webjars使用过jar包方式引入静态资源的，访问官网：https://www.webjars.org
官网的说明已经告诉我们，WebJars就是帮助我们把一些web库例如jQuery&amp;amp;Bootstrap等打包到jar中，我们通过依赖就可以快速使用
 WebJars are client-side web libraries (e.g. jQuery &amp;amp; Bootstrap) packaged into JAR (Java Archive) files. Explicitly and easily manage the client-side dependencies in JVM-based web applications Use JVM-based build tools (e.</description>
    </item>
    
    <item>
      <title>Springboot全局字符编码设置</title>
      <link>https://chenjiesong.github.io/posts/springboot%E5%85%A8%E5%B1%80%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E5%85%A8%E5%B1%80%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/</guid>
      <description>application.yaml设置
server: port: 8008 servlet: encoding: force: true charset: UTF-8 enabled: true tomcat: uri-encoding: UTF-8 </description>
    </item>
    
    <item>
      <title>Springboot项目目录结构命名规则</title>
      <link>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</guid>
      <description>解释：
 controller：各请求的入口； mapper：各个方法所用的spl的文件，一般为java类或XML文件； service：承载controller方法的业务逻辑的service类 model：方法里锁引用到的实体类。model里还可分为：dto，vo；dto是用于数据交换的类，vo是用于展示数据的类； Application，启动类！springboot由于内嵌容器，因此不需要再安装tomcat等容器去启动。但是需要一个启动的入口，而这个Application正是起到这种作用； application.properties，项目核心配置文件，数据库连接配置、参数配置等等都靠此文件规整； pox.xml，主要描述了项目的maven坐标，依赖关系等；  </description>
    </item>
    
    <item>
      <title>Springboot-YAML配置</title>
      <link>https://chenjiesong.github.io/posts/springboot-yaml%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot-yaml%E9%85%8D%E7%BD%AE/</guid>
      <description>(一) SpringBoot配置文件类型 在前一篇的入门原理讲解中，我们简单有提到过关于自动配置的一些说明，我们演示的时候，仅仅在 src\main\resources 下的 application.properties 中写入 server.port=9090 就可以非常便捷的修改端口号
也就是说，SpringBoot是基于约定的，很多值都是默认存在的，如果想要进行一定的修改，我们就需要使用 application.properties或者application.yml（application.yaml）进行配置
properties，我们相对还是熟悉的，在过去 Spring 中的开发我们还算是经常用
这一篇主要讲解 yaml 这一类型
(二) yaml 简介 YAM的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态,它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大。尽管它比较适合用来表达层次结构式的数据结构，不过也有精致的语法可以表示关系性的数据其让人最容易上手的特色是巧妙避开各种封闭符号，如：引号、各种括号等，这些符号在嵌套结构时会变得复杂而难以辨认
(三) 基础语法   基本写法
key: key1: value1 key2: value2   行内写法
key: {key1: value1,key2: value2} 说明：key1 前面空格个数是没有限定的，虽然默认是两格，但是只要是相同缩进，就代表是同一级别，用默认即可，仅此说明
  (四) 配置数组、List、Set 数据 这里用 - 代表一个元素，注意 - 和 value1 等之间存在一个空格
  基本写法
key: - value1 - value2   行内写法
key: [value1,value2] 补充：当集合中元素为对象的时候，示例如下
user: - name: zhangsan age: 20 address: beijing - name: lisi age: 28 address: shanghai - name: wangwu age: 26 address: shenzhen   (五) 配置文件与配置类的属性映射 1.</description>
    </item>
    
    <item>
      <title>Springboot原理分析</title>
      <link>https://chenjiesong.github.io/posts/springboot%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>一、起步依赖原理分析   spring-boot-starter-parent
通过Maven创建一个SpringBoot的项目的时候，我们需要在前面使用标签对引入一个spring-boot-starter-parent
这就是SpringBoot的父级依赖，它就是一个特殊的starter，可以用来提供我们所需Maven的一些依赖，同时管理项目的资源过滤
简单看一下，首先按下ctrl键单击spring-boot-starter-parent，
&amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; 进去之后，就是一些资源引入的内容，还有一些插件，接着又看到一个父级标签，我们继续点进去看一看。
&amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath&amp;gt;../../spring-boot-dependencies&amp;lt;/relativePath&amp;gt; &amp;lt;/parent&amp;gt; 到此位置，就看不到别的父级标签了，来观察一些这个文件，纵观一下，这里就是管理SpringBoot应用里面所有依赖版本的地方
 properties 标签中配置了一些版本信息 dependency 标签内就是各种依赖 plugins 标签内就是一些涉及的插件  Springboot会帮我们根据我们选定的SpringBoot版本，选择出最适合的依赖们。
&amp;lt;properties&amp;gt; ...... &amp;lt;activemq.version&amp;gt;5.15.12&amp;lt;/activemq.version&amp;gt; &amp;lt;commons-pool.version&amp;gt;1.6&amp;lt;/commons-pool.version&amp;gt; &amp;lt;jackson.version&amp;gt;2.10.4&amp;lt;/jackson.version&amp;gt; &amp;lt;javax-mail.version&amp;gt;1.6.2&amp;lt;/javax-mail.version&amp;gt; &amp;lt;log4j2.version&amp;gt;2.12.1&amp;lt;/log4j2.version&amp;gt; &amp;lt;logback.version&amp;gt;1.2.3&amp;lt;/logback.version&amp;gt; &amp;lt;mssql-jdbc.version&amp;gt;7.4.1.jre8&amp;lt;/mssql-jdbc.version&amp;gt; &amp;lt;mysql.version&amp;gt;8.0.20&amp;lt;/mysql.version&amp;gt; ...... &amp;lt;/properties&amp;gt; &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; ...... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-pool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-pool&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${commons-pool.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; ..... &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;pluginManagement&amp;gt; &amp;lt;plugins&amp;gt; .</description>
    </item>
    
    <item>
      <title>Springboot项目打包</title>
      <link>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</guid>
      <description>配置pom.xml
&amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 在右侧我们可以选择clean然后package进行打包，当控制台显示BUILD SUCCESS后，target下就会多出一个jar包
将jar包编译执行：</description>
    </item>
    
    <item>
      <title>Springboot工程热部署</title>
      <link>https://chenjiesong.github.io/posts/springboot%E5%B7%A5%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E5%B7%A5%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</guid>
      <description>添加依赖 下面是热部署的依赖，如果我们在初始化组件的时候就选择devtools就不需要自己添加依赖了。
&amp;lt;!--热部署配置--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置完还不行，因为默认IDEA是不会自动编译的，所以我们还需要修改一些设置。
 修改配置 在设置中，找到编译相关的，然后将Build project automatically勾选上
接着组合键Shift+Ctrl+Alt+/,选择注册表
在下面找到，complier.automake.allow.when.app.running 然后勾选，接着推出
重启服务器即可</description>
    </item>
    
    <item>
      <title>Springboot目录结构</title>
      <link>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>Application类（入口类）  里面的@SpringBootApplication注解是springboot的核心注解，主要作用是开启spring自动配置。使用这个注解相当于加上了下面三个注解：main方法中的SpringApplication.run在启动的时候会启动springboot程序，启动spring容器，启动内嵌的tomcat容器。  @Conifuration 允许将其他@bean注解标识的类加入到spring容器中，相当于spring配置文件中的beans标签 @EnableAutoConfiguration 启动自动配置 ComponentScan 会自动扫描当前包和子包下的标有@Component，@Service，@Repository,@Controller的类。相当于以前spring配置文件中的context：compon-scan   不要创建一个比Application类包级别高的类，需要创建子包，因为spring boot会自动扫描application类的子包或者平级的类。如果是高于application的话就无法扫描了。   resources目录  application.properties是spring boot配置文件 static存放静态资源 templatesspring boot动态的数据不建议使用jsp，而是使用thymeleaf模板语言，跟velocity和freemarker类似，是一个模板引擎。是独立于spring boot的，并不是spring boot的一部分。   pom文件解析 依赖没有版本号，是从父工程中选择继承的。这个依赖叫做起步依赖，这些第三方的依赖是写再了dependencymanagement中，所以我们的项目如果想要使用的话，还需要些依赖，只不过版本号是可以省略的。如果不想使用spring boot的默认版本的话，自己动手添加版本号即可。</description>
    </item>
    
    <item>
      <title>创建SpringBoot项目</title>
      <link>https://chenjiesong.github.io/posts/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</guid>
      <description>创建一个模块 设置组(group)和工件(artifact)
勾选web，这里创建一个web项目
继续下一步完成
 添加起步依赖 根据SpringBoot的要求，我们要进行简单的测试还需要添加其起步的依赖
 项目要继承SpringBoot的起步依赖spring-boot-starter-parent 为了集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖spring-boot-starter-web  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;share&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;api&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Demo project for Spring Boot&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;11&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt;  编写SpringBoot启动类 在包名下创建一个类ApiApplication
package share.api; import org.</description>
    </item>
    
  </channel>
</rss>
