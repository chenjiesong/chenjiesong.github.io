<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>song</title>
    <link>https://chenjiesong.github.io/</link>
    <description>Recent content on song</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://chenjiesong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IOC容器底层原理</title>
      <link>https://chenjiesong.github.io/posts/ioc%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/ioc%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      <description> 一、什么是IOC  控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理 使用IOC目的：为了耦合度降低   二、IOC的底层原理 （1）工厂模式： （2） </description>
    </item>
    
    <item>
      <title>Spring5案例练习</title>
      <link>https://chenjiesong.github.io/posts/spring5%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/spring5%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</guid>
      <description>下载最新的Spring5：
官网下载地址：https://repo.spring.io/release/org/springframework/spring/
日志jar包：http://commons.apache.org/proper/commons-logging/download_logging.cgi
github（Spring5核心组件）：https://github.com/chenjiesong/img_study/tree/main/study
  idea创建普通Java工程
  创建文件夹lib，导入核心组件：
  commons-logging：日志
  beans：IOC核心部分
  core：IOC核心部分
  context：上下文
  expression：表达式
​	  点击文件-&amp;gt; 项目结构 -&amp;gt; 模块 -&amp;gt; 依赖 -&amp;gt; &amp;ldquo;+&amp;rdquo; -&amp;gt; 导入JAR -&amp;gt; 选中lib下的jar包 -&amp;gt; 确定
  src创建包，在其创建普通类，输入简单代码
​	package spring; public class User { public void add() { System.out.println(&amp;#34;test&amp;#34;); } }   创建Spring配置文件，在配置文件配置创建的对象
src新建xml -&amp;gt; Spring配置文件 -&amp;gt; 使用bean标签配置User对象创建</description>
    </item>
    
    <item>
      <title>Spring5概述</title>
      <link>https://chenjiesong.github.io/posts/spring5%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/spring5%E6%A6%82%E8%BF%B0/</guid>
      <description> Spring框架概述   Spring是轻量级的开源JavaEE框架
  Spring可以解决企业应用开发的复杂性
  Spring有两个核心部分：IOC和Aop
 IOC：控制反转，把创建对象过程交给Spring进行管理 Aop：面向切面，不修改源代码进行功能增强    Spring特点
 方便解耦，简化开发 Aop编程支持 方便程序测试 方便和其他框架整合 方便进行事务操作 降低API开发难度    Spring 下载地址：https://repo.spring.io/release/org/springframework/spring/
   Spring系统模块 Spring的组件被分别整合在
 Data Access/Integration（数据访问及集成） Web Aspect Oriented Programming（面向切面编程） Instrmentation（设备支持） Messaging（报文发送） Core Container（核心容器） Test  </description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://chenjiesong.github.io/posts/java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E5%9F%BA%E7%A1%80/</guid>
      <description>一、JAVA开发环境配置   下载java开发工具包JDK，下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html ；
  安装完成后，右击&amp;quot;我的电脑&amp;quot;，点击&amp;quot;属性&amp;quot;，选择&amp;quot;高级系统设置&amp;quot;，选择&amp;quot;高级&amp;quot;选项卡，点击&amp;quot;环境变量&amp;quot;
在 &amp;ldquo;系统变量&amp;rdquo; 中设置 3 项属性，JAVA_HOME、PATH、CLASSPATH(大小写无所谓),若已存在则点击&amp;quot;编辑&amp;quot;，不存在则点击&amp;quot;新建&amp;quot;。 ；
变量名：JAVA_HOME 变量值：C:\Program Files (x86)\Java\jdk1.8.0_91 // 要根据自己的实际路径配置 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; //记得前面有个&amp;#34;.&amp;#34; 变量名：Path 变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;   检测JDK是否安装成功：cmd键入命令: java -version、java、javac ；
  java开发工具的选择：Eclipse/IDEA ；
   二、格式要求   java程序编写-编译-运行的过程
 编写：java代码保存在以“.java”结尾的源文件中 ； 编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java ； 运行：使用java.exe命令解释运行我们的字节码文件。 格式： java 类名 ；    在一个java源文件中可以声明多个class。但是，只能最多一个类声明为public的。而且要求声明为public的类的类名必须与源文件名相同 ；
  程序的入口是main()方法。格式是固定的 ；
  每一行执行语句以；为结尾 ；
  编译的过程：编译以后，会生成一个或多个字节码文件 ；</description>
    </item>
    
    <item>
      <title>Java增强型for循环 for each</title>
      <link>https://chenjiesong.github.io/posts/java%E5%A2%9E%E5%8A%A0%E5%9E%8Bfor%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E5%A2%9E%E5%8A%A0%E5%9E%8Bfor%E5%BE%AA%E7%8E%AF/</guid>
      <description>For-Each 循环  For-Each循环也叫增强型的for循环，或者叫foreach循环。 For-Each循环是JDK5.0的新特性（其他新特性比如泛型、自动装箱等）。 For-Each循环的加入简化了集合的遍历。  其语法如下：
 　for(type element: array)
　{
　System.out.println(element);
　}
 import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class ForeachTest { public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; System.out.println(&amp;#34;----------旧方式遍历------------&amp;#34;); //旧式方式  for(int i=0; i&amp;lt;arr.length; i++) { System.out.println(arr[i]); } System.out.println(&amp;#34;---------新方式遍历-------------&amp;#34;); //新式写法,增强的for循环  for(int element:arr) { System.out.println(element); } System.out.println(&amp;#34;---------遍历二维数组-------------&amp;#34;); //遍历二维数组  int[][] arr2 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} ; for(int[] row : arr2) { for(int element : row) { System.</description>
    </item>
    
    <item>
      <title>Java求各位数字</title>
      <link>https://chenjiesong.github.io/posts/java%E6%B1%82%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E6%B1%82%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
