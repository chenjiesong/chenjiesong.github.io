<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>song</title>
    <link>https://chenjiesong.github.io/</link>
    <description>Recent content on song</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenjiesong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Springboot项目打包</title>
      <link>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</guid>
      <description>配置pom.xml
&amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 在右侧我们可以选择clean然后package进行打包，当控制台显示BUILD SUCCESS后，target下就会多出一个jar包
将jar包编译执行：</description>
    </item>
    
    <item>
      <title>Springboot工程热部署</title>
      <link>https://chenjiesong.github.io/posts/springboot%E5%B7%A5%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E5%B7%A5%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</guid>
      <description>添加依赖 下面是热部署的依赖，如果我们在初始化组件的时候就选择devtools就不需要自己添加依赖了。
&amp;lt;!--热部署配置--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置完还不行，因为默认IDEA是不会自动编译的，所以我们还需要修改一些设置。
 修改配置 在设置中，找到编译相关的，然后将Build project automatically勾选上
接着组合键Shift+Ctrl+Alt+/,选择注册表
在下面找到，complier.automake.allow.when.app.running 然后勾选，接着推出
重启服务器即可</description>
    </item>
    
    <item>
      <title>Springboot目录结构</title>
      <link>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/springboot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>Application类（入口类）  里面的@SpringBootApplication注解是springboot的核心注解，主要作用是开启spring自动配置。使用这个注解相当于加上了下面三个注解：main方法中的SpringApplication.run在启动的时候会启动springboot程序，启动spring容器，启动内嵌的tomcat容器。  @Conifuration 允许将其他@bean注解标识的类加入到spring容器中，相当于spring配置文件中的beans标签 @EnableAutoConfiguration 启动自动配置 ComponentScan 会自动扫描当前包和子包下的标有@Component，@Service，@Repository,@Controller的类。相当于以前spring配置文件中的context：compon-scan   不要创建一个比Application类包级别高的类，需要创建子包，因为spring boot会自动扫描application类的子包或者平级的类。如果是高于application的话就无法扫描了。   resources目录  application.properties是spring boot配置文件 static存放静态资源 templatesspring boot动态的数据不建议使用jsp，而是使用thymeleaf模板语言，跟velocity和freemarker类似，是一个模板引擎。是独立于spring boot的，并不是spring boot的一部分。   pom文件解析 依赖没有版本号，是从父工程中选择继承的。这个依赖叫做起步依赖，这些第三方的依赖是写再了dependencymanagement中，所以我们的项目如果想要使用的话，还需要些依赖，只不过版本号是可以省略的。如果不想使用spring boot的默认版本的话，自己动手添加版本号即可。</description>
    </item>
    
    <item>
      <title>创建SpringBoot项目</title>
      <link>https://chenjiesong.github.io/posts/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</guid>
      <description>创建一个模块 设置组(group)和工件(artifact)
勾选web，这里创建一个web项目
继续下一步完成
 添加起步依赖 根据SpringBoot的要求，我们要进行简单的测试还需要添加其起步的依赖
 项目要继承SpringBoot的起步依赖spring-boot-starter-parent 为了集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖spring-boot-starter-web  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;share&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;api&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Demo project for Spring Boot&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;11&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt;  编写SpringBoot启动类 在包名下创建一个类ApiApplication
package share.api; import org.</description>
    </item>
    
    <item>
      <title>Python matplotlib绘制股票走势图</title>
      <link>https://chenjiesong.github.io/posts/python-matplotlib%E7%BB%98%E5%88%B6%E8%82%A1%E7%A5%A8%E8%B5%B0%E5%8A%BF%E5%9B%BE/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/python-matplotlib%E7%BB%98%E5%88%B6%E8%82%A1%E7%A5%A8%E8%B5%B0%E5%8A%BF%E5%9B%BE/</guid>
      <description>matplotlib中通过pyplot模块进行图表的绘制。所绘制的图表称为一个绘图对象，在绘图对象之上绘制各种图形。由于K线图主要是基于日期和股票价格的X-Y坐标轴结构，因此本系列文章也主要针对axes坐标轴绘制进行分析。 通过如下语句导入需要绘图的库：.
import matplotlib.pyplot as plt 1. figure对象 figure对象可以看成整个图表。在figure图表之上增加多个子图，然后在子图之上绘制点和线。
fig = plt.figure() ax = fig.add_subplot(1,1,1) 得到fig对象之后，通过add_subplot增加子图（返回了一个axes坐标轴），该方法需要三个参数，分别为：numrows, numcols, fignum。其中，一共有numrowsnumcols个子图，即：将图表分为N行M列，fignum标识了该子图的顺序，其范围从1到numrowsnumcols。在上例中1,1,1表示了该绘图对象仅有1个子图，也就是11类型。
2. plot方法绘图 创建子图之后，通过plot方法在子图上绘制。plot方法可以传入两个list，分别表示X和Y坐标，因此x和y的长度要一致。需要注意的是，plot也可以接受一个list参数作为Y坐标的值，默认X坐标的值从0开始到Y的长度。
plt.plot([1,2,3,4]) 其中X坐标为0到3，个数与Y坐标值的数目相同。
plt.plot([1,2,3,4], [1,2,3,4]) 设置了X坐标的值。然后通过plot.show()显示该图，示例代码如下：
def PlotDemo1(): fig = plt.figure() ax = fig.add_subplot(1,1,1) ax.plot([1,2,3,4],[2,3,4,5]) plt.show() 上述图表作为基础，以后我们都是围绕这个基础图表不断添加元素，直到达到我们想要的效果。
2.1 增加标题和坐标轴说明 如果需要给绘图对象增加标题，可以通过suptitle方法设置，其中可以设置参数：标题、标题字体大小、字体类型等。代码示例如下：
fig.suptitle(&amp;#39;figure title demo&amp;#39;, fontsize = 14, fontweight=&amp;#39;bold&amp;#39;) 如果需要对给定子图的坐标轴设置标题，可以通过刚才返回的axes对象的set_title进行设置，代码示例如下：
ax.set_title(&amp;#34;axes title&amp;#34;) 如果需要对于X和Y坐标设置标签，可以通过set_xlabel和set_ylabel方法设置。代码示例如下：
ax.set_xlabel(&amp;#34;x label&amp;#34;) ax.set_ylabel(&amp;#34;y label&amp;#34;) 通过上述的示例，我们绘制了一个基本的X和Y坐标轴，并增加了针对坐标轴的说明。
三、股价基本走势图 股票的K线图（以日K为例）由日期和价格组成，形成X-Y坐标轴，按照前面的绘图方案，需要传入日期数组和价格数组即可。 1.numpy数组 numpy是常用的数据处理库，我将000001.SZ的股价数据（时间范围从20150101到20150930）导入到csv中，然后通过numpy读取得到日期和价格数组。csv文件中包含了两列，日期和价格，分割符号为&amp;quot;,&amp;quot;，读取过程代码如下：
dates, close = np.loadtxt(filename,delimiter=&amp;#34;,&amp;#34;, unpack= True, converters={0:mdates.strpdate2num(&amp;#39;%Y-%m-%d&amp;#39;)}) 　numpy的loadtxt方法：设定了文件中的分隔符号为“，”，unpack是否将数组拆分，True为拆分，即：得到两个数组分别表示日期和收盘价格，converters是将日期类型的字符串转为数组，因为numpy规定其数组中的类型需要一致。 2.</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://chenjiesong.github.io/posts/java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E5%9F%BA%E7%A1%80/</guid>
      <description>一、JAVA开发环境配置   下载java开发工具包JDK，下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html ；
  安装完成后，右击&amp;quot;我的电脑&amp;quot;，点击&amp;quot;属性&amp;quot;，选择&amp;quot;高级系统设置&amp;quot;，选择&amp;quot;高级&amp;quot;选项卡，点击&amp;quot;环境变量&amp;quot;
在 &amp;ldquo;系统变量&amp;rdquo; 中设置 3 项属性，JAVA_HOME、PATH、CLASSPATH(大小写无所谓),若已存在则点击&amp;quot;编辑&amp;quot;，不存在则点击&amp;quot;新建&amp;quot;。 ；
变量名：JAVA_HOME 变量值：C:\Program Files (x86)\Java\jdk1.8.0_91 // 要根据自己的实际路径配置 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; //记得前面有个&amp;#34;.&amp;#34; 变量名：Path 变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;   检测JDK是否安装成功：cmd键入命令: java -version、java、javac ；
  java开发工具的选择：Eclipse/IDEA ；
   二、格式要求   java程序编写-编译-运行的过程
 编写：java代码保存在以“.java”结尾的源文件中 ； 编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java ； 运行：使用java.exe命令解释运行我们的字节码文件。 格式： java 类名 ；    在一个java源文件中可以声明多个class。但是，只能最多一个类声明为public的。而且要求声明为public的类的类名必须与源文件名相同 ；
  程序的入口是main()方法。格式是固定的 ；
  每一行执行语句以；为结尾 ；
  编译的过程：编译以后，会生成一个或多个字节码文件 ；</description>
    </item>
    
    <item>
      <title>IOC容器底层原理</title>
      <link>https://chenjiesong.github.io/posts/ioc%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/ioc%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      <description> 一、什么是IOC  控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理。 使用IOC目的：为了耦合度降低。   二、IOC的底层原理 （1）工厂模式： （2） </description>
    </item>
    
    <item>
      <title>Java反射创建对象</title>
      <link>https://chenjiesong.github.io/posts/java%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</guid>
      <description>在Java语言中，除了通过new关键字来创建类对象的实例，还可以通过反射技术来创建类对象的实例。
通过反射来创建类对象的实例，首先我们的</description>
    </item>
    
    <item>
      <title>Spring5案例练习</title>
      <link>https://chenjiesong.github.io/posts/spring5%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/spring5%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</guid>
      <description>下载最新的Spring5：
官网下载地址：https://repo.spring.io/release/org/springframework/spring/
日志jar包：http://commons.apache.org/proper/commons-logging/download_logging.cgi
github（Spring5核心组件）：https://github.com/chenjiesong/img_study/tree/main/study
  idea创建普通Java工程
  创建文件夹lib，导入核心组件：
  commons-logging：日志
  beans：IOC核心部分
  core：IOC核心部分
  context：上下文
  expression：表达式
​	  点击文件-&amp;gt; 项目结构 -&amp;gt; 模块 -&amp;gt; 依赖 -&amp;gt; &amp;ldquo;+&amp;rdquo; -&amp;gt; 导入JAR -&amp;gt; 选中lib下的jar包 -&amp;gt; 确定
  src创建包，在其创建普通类，输入简单代码
​	package spring; public class User { public void add() { System.out.println(&amp;#34;test&amp;#34;); } }   创建Spring配置文件，在配置文件配置创建的对象
src新建xml -&amp;gt; Spring配置文件 -&amp;gt; 使用bean标签配置User对象创建</description>
    </item>
    
    <item>
      <title>股票api</title>
      <link>https://chenjiesong.github.io/posts/%E8%82%A1%E7%A5%A8api/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/%E8%82%A1%E7%A5%A8api/</guid>
      <description>很简单，其实就是你的量化程序读取数据，然后生成具体买卖指令，写入到本地文本文件。然后交易软件读取这个文件即可。
现在不能接入了，不过可以通过一种写文件流的方式来交易
https://www.alphavantage.co/documentation/#
Welcome to Alpha Vantage! Your API key is: AZ50TEZFWRKLEROM. Please record this API key at a safe place for future data access.
ig507.com
分时数据比不上level2明细数据吧？分时数据因为有加总处理，所以你看不到每一单，没法分析细节。
https://www.akshare.xyz/zh_CN/latest/introduction.html
https://github.com/jindaxiang/akshare
C3624304-F50B-DEF2-47AC-0E098D36C15B</description>
    </item>
    
    <item>
      <title>Spring5概述</title>
      <link>https://chenjiesong.github.io/posts/spring5%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/spring5%E6%A6%82%E8%BF%B0/</guid>
      <description> Spring框架概述   Spring是轻量级的开源JavaEE框架
  Spring可以解决企业应用开发的复杂性
  Spring有两个核心部分：IOC和Aop
 IOC：控制反转，把创建对象过程交给Spring进行管理 Aop：面向切面，不修改源代码进行功能增强    Spring特点
 方便解耦，简化开发 Aop编程支持 方便程序测试 方便和其他框架整合 方便进行事务操作 降低API开发难度    Spring 下载地址：https://repo.spring.io/release/org/springframework/spring/
   Spring系统模块 Spring的组件被分别整合在
 Data Access/Integration（数据访问及集成） Web Aspect Oriented Programming（面向切面编程） Instrmentation（设备支持） Messaging（报文发送） Core Container（核心容器） Test  </description>
    </item>
    
    <item>
      <title>Java增强型for循环 for each</title>
      <link>https://chenjiesong.github.io/posts/java%E5%A2%9E%E5%8A%A0%E5%9E%8Bfor%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chenjiesong.github.io/posts/java%E5%A2%9E%E5%8A%A0%E5%9E%8Bfor%E5%BE%AA%E7%8E%AF/</guid>
      <description>For-Each 循环   For-Each循环也叫增强型的for循环，或者叫foreach循环。
  For-Each循环是JDK5.0的新特性（其他新特性比如泛型、自动装箱等）。
  For-Each循环的加入简化了集合的遍历。
  缺点：丢掉了索引信息。
当遍历集合或数组时，如果需要访问集合或数组的下标，那么最好使用旧式的方式来实现循环或遍历，而不要使用增强的for循环，因为它丢失了下标信息。
  其语法如下：
 　for(type element: array)
　{
　System.out.println(element);
　}
 import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class ForeachTest { public static void main(String[] args) { int[] arr = {1, 2, 3, 4, 5}; System.out.println(&amp;#34;----------旧方式遍历------------&amp;#34;); //旧式方式  for(int i=0; i&amp;lt;arr.length; i++) { System.out.println(arr[i]); } System.out.println(&amp;#34;---------新方式遍历-------------&amp;#34;); //新式写法,增强的for循环  for(int element:arr) { System.</description>
    </item>
    
  </channel>
</rss>
